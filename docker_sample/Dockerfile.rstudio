# Docker all-in-one image for local trs
FROM ubuntu:18.04
MAINTAINER NONE
LABEL version="jupyterlab2.1.4-rstudio1.3.959"

# Install build essentials and normal dev tools
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 DEBIAN_FRONTEND=noninteractive
RUN apt-get update -y --fix-missing \
        && apt-get install -y git zsh curl build-essential binutils libclang-dev psmisc maven sudo lsb-release \
        vim gnuplot pandoc software-properties-common

# Install dev tools for cassini
RUN apt-get update -y --fix-missing \
        && apt-get install -y cmake gcc-7 g++-7 ninja-build \
        libboost-all-dev libeigen3-dev libcppunit-dev libssl-dev libcurl4-openssl-dev libxml2-dev \
        doxygen graphviz valgrind proxychains4 cpanminus

# Install R and python
RUN apt-get purge -y r-base* r-recommended r-cran-*; apt-get -y autoremove; \
        add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'; \
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9

RUN bash -c "$(curl -fsL https://deb.nodesource.com/setup_12.x)" \
  && apt-get update -y --fix-missing \
  && apt-get install -y openjdk-11-jdk scala python3-dev python3-pip octave nodejs \
  r-base r-base-core r-recommended r-base-dev

# Install sbt
RUN echo "deb https://dl.bintray.com/sbt/debian /" > /etc/apt/sources.list.d/sbt.list \
  && curl -fsL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | apt-key add
RUN apt-get update -y --fix-missing \
  && apt-get install -y sbt

# Install rstudio
RUN curl -o rstudio-server-1.3.959-amd64.deb -fsL https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.3.959-amd64.deb  \
  && dpkg -i rstudio-server-1.3.959-amd64.deb

# Setup rstudio
ENV RSTUDIO_GID="8787"
RUN groupadd -g ${RSTUDIO_GID} rstudio-users
COPY image/rserver.conf /etc/rstudio/
RUN pip3 install --upgrade pip
RUN pip install --upgrade setuptools \
  && pip install --upgrade jupyterlab
RUN R -e "install.packages('IRkernel');IRkernel::installspec(user = FALSE)"
RUN pip install --upgrade octave_kernel

# Setup R dependencies
# If R failed to install packages, RUN mount -o remount,exec /tmp
# First line dependencies for spot
# Second line dependencies for mlrr
# 3rd line is common used libs
# For mlrr dependencies, it should has plotROC but dependency 'XML' only exists in ms site. So we install it later
RUN R -e "pkgs = '\
        devtools roxygen2 Rcpp rmarkdown DT RJDBC jsonlite data.table mailR httr urltools base64 stringi openssl knitr \
        boot gbm ggplot2 dplyr magrittr purrr tibble rmarkdown knitr flexdashboard DT stats yaml stringr parallel methods rjson graphics lattice plotly htmltools precrec testthat \
        readr tidyverse zoo fastmap \
        '; pkgs = strsplit(pkgs, '\\\\s')[[1]]; pkgs = pkgs[pkgs != '']; install.packages(pkgs);"
RUN R -e "install.packages('XML', repos = 'https://mran.microsoft.com/snapshot/2018-12-20'); install.packages('plotROC')"
# install.packages(pkgs, repos = 'https://cran.rstudio.org');
# lapply(pkgs, FUN = function(X) { do.call('require', list(X)) });
# local({r <- getOption('repos'); r['CRAN'] <- 'https://mran.microsoft.com/snapshot/2018-12-20'; options(repos=r) });

# Setup perl dependencies
RUN sudo apt-get -y install libdatetime-perl

# Install debug tools
RUN apt-get update -y --fix-missing \
        && apt-get install -y busybox iproute2 net-tools binutils strace sshuttle ssh iputils-ping telnet mysql-client dnsutils binutils \
        netcat traceroute gdb screen tmux glusterfs-client

# Set up other start environments
ENV USER="stack" PASSWD="stack" SHELL="/bin/bash" UID="1000" GID="1000" OCTAVE_SITE_INITFILE="/etc/octaverc"
# Ensure we have gid 1000. It's OK not stack
RUN groupadd -g ${GID} ${USER}
RUN useradd -m -u ${UID} -g ${GID} -G audio,video,rstudio-users -p `echo "${PASSWD}" | openssl passwd -1 -stdin` -s ${SHELL} ${USER}
RUN echo "${USER}   ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers; echo "PATH=\$PATH:/opt/localtrs/bin" >> /etc/profile; echo "export PATH" >> /etc/profile

COPY image/start_servers.sh /start_servers.sh
RUN chmod a+x /start_servers.sh
COPY image/vim.tar.gz /vim.tar.gz
COPY image/octaverc /etc/octaverc
COPY generator /opt/localtrs/bin
RUN ln -s start_trs.sh /opt/localtrs/bin/start_trs_localsibe.sh
RUN chmod -R 777 /opt/localtrs/bin

EXPOSE 8888
EXPOSE 8787
EXPOSE 9090
EXPOSE 9095
CMD ["/bin/bash", "/start_servers.sh"]
